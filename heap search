#include <iostream>
#include <vector>
#include <algorithm>

class MinHeap {
private:
    std::vector<int> heap;

    // Helper function to maintain the heap property after an insertion
    void heapifyUp(int index) {
        while (index > 0) {
            int parentIndex = (index - 1) / 2;

            if (heap[index] < heap[parentIndex]) {
                std::swap(heap[index], heap[parentIndex]);
                index = parentIndex;
            } else {
                break;
            }
        }
    }

public:
    // Function to insert a new element into the min-heap
    void insert(int value) {
        heap.push_back(value);
        heapifyUp(heap.size() - 1);
    }

    // Function to extract the minimum element from the min-heap
    int extractMin() {
        if (heap.empty()) {
            std::cerr << "Error: Heap is empty." << std::endl;
            return -1; // Assuming -1 indicates an error or undefined value
        }

        int minElement = heap[0];
        heap[0] = heap.back();
        heap.pop_back();

        // Heapify down to maintain the heap property
        unsigned int index = 0;
        while (true) {
            unsigned int leftChild = 2 * index + 1;
            unsigned int rightChild = 2 * index + 2;
            unsigned int smallest = index;

            if (leftChild < heap.size() && heap[leftChild] < heap[smallest]) {
                smallest = leftChild;
            }

            if (rightChild < heap.size() && heap[rightChild] < heap[smallest]) {
                smallest = rightChild;
            }

            if (smallest != index) {
                std::swap(heap[index], heap[smallest]);
                index = smallest;
            } else {
                break;
            }
        }

        return minElement;
    }
};

int main() {
    // Example usage of MinHeap
    MinHeap minHeap;

    minHeap.insert(4);
    minHeap.insert(8);
    minHeap.insert(2);
    minHeap.insert(6);

    std::cout << "Min element: " << minHeap.extractMin() << std::endl;
    std::cout << "Min element: " << minHeap.extractMin() << std::endl;

    return 0;
}
